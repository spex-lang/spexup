#!/bin/sh

# This script does platform detection and installs the latest appropriate
# release of the spex language. The platform detection code is taken from
# rustup.

# shellcheck shell=sh
# shellcheck disable=SC3043  # local is non-POSIX

# It runs on Unix shells like {a,ba,da,k,z}sh. It uses the common `local`
# extension. Note: Most shells limit `local` to 1 var per line, contra bash.

# Some versions of ksh have no `local` keyword. Alias it to `typeset`, but
# beware this makes variables global with f()-style function syntax in ksh93.
# mksh has this alias by default.
has_local() {
    # shellcheck disable=SC2034  # deliberately unused
    local _has_local
}

has_local 2>/dev/null || alias local=typeset

set -u # Treat unset variables as an error when substituting.
# set -x # Print every step (for debugging).

export SPEXUP_VERSION=0.0.0
OWNER=spex-lang
REPOS="spex"
SPEX_NONINTERACTIVE="${SPEX_NONINTERACTIVE:=false}"

main () {

  check_terminal_ansi_support

  if [ "${SPEX_NONINTERACTIVE}" = false ] && [ -t 0 ]; then
    echo ""
    say "About to install the Spex programming language and toolkit."
    echo ""
    echo "  Would you like to proceed? [y/N]?"
    echo ""
    printf "  "
    read -r yn
    if [ "$yn" != "y" ] && [ "$yn" != "Y" ]; then
        echo "  Aborting..."
        exit 1
    fi
  fi

  need_cmd curl
  need_cmd awk
  need_cmd uname
  need_cmd chmod
  need_cmd mkdir
  need_cmd ln

  if check_cmd "gh"; then
    USE_GH=true
  elif check_cmd "jq"; then
    _USE_JQ=true
  else
    err "need 'jq' or 'gh' (command not found)"
    exit 1
  fi

  if [ "$USE_GH" ]; then
    gh auth status >/dev/null 2>&1 || \
        echo "${GH_TOKEN}" | gh auth login --with-token
  fi

  get_architecture || return 1
  local _arch="$RETVAL"
  assert_nz "$_arch" "Couldn't detect platform (OS and CPU), please report a \
bug with the \n       output of 'uname -a'."

  say "Detected platform: $_arch"

  local _platform
  local _bindir
  local _suffix=""
  case "$_arch" in
    x86_64*linux*)   _platform=x86_64-linux
                     _bindir="${XDG_BIN_HOME:=$HOME/.local/bin}" ;;
    aarch64*darwin*) _platform=arm64-macos
                     _bindir="/usr/local/bin" ;;
    x86_64*windows*) _platform=x86_64-windows 
                     _bindir="/usr/local/bin"
                     _suffix=".exe" ;;
    *) 
      echo ""
      err "Your platform is currently not supported."
      echo ""
      echo "Try building from source instead, as explained in the README:"
      echo ""
      echo "    https://github.com/$OWNER/spex"
      echo ""
      echo "Also please open a ticket about adding support for your platform!"
      exit 1
      ;;
  esac

  ensure mkdir -p "$_bindir"

  for repo in $REPOS; do
    local _latest_version
    _latest_version="$(latest_release "$repo")"
    assert_nz "$_latest_version" "No release of $repo is available yet."
    local _download_urls
    _download_urls=$(binary_assets "$repo" "$_latest_version" "$_platform")
    assert_nz "$_download_urls" "No downloaded urls for $_latest_version."
    for url in $_download_urls; do

      # Remove trailing whitespace.
      url=$(echo "$url" | awk '{$1=$1;print}')

      local _file
      _file="$_bindir/$(basename "$url")"

      say "Downloading binary from:"
      echo ""
      echo "   '$url'"
      echo ""
      echo "  Installing it here:"
      echo ""
      echo "    $_file"
      echo ""

      ensure curl \
          --header "User-Agent: spex-lang/spexup" \
          --retry 5 --silent --show-error --fail --location --output "$_file" "$url"
      ensure chmod 755 "$_file"

      _latest_version=$(echo "$_latest_version" | sed 's/^v//')

      local _symlink
      _symlink="$(dirname "$_file")/$(basename "$_file" "-${_latest_version}-${_platform}${_suffix}")${_suffix}"
      say "Creating symlink:"
      echo ""
      echo "  $_symlink ->"
      echo "  $_file"
      echo ""
      ensure ln -sf "$_file" "$_symlink"
    done
  done

  if ! check_cmd spex; then
    warn "Ensure that you add $_bindir to your PATH, i.e.:"
    echo "export PATH=\"\$PATH:$_bindir\""
  else
    say "Done installing version: $(spex --version)"
  fi
}

latest_release () {
  local _repo="$1"
  if [ "$USE_GH" ]; then
    gh release list --repo "${OWNER}/$_repo" \
        --exclude-drafts --limit 1 --json tagName --jq '.[].tagName'
  else
    downloader "https://api.github.com/repos/$OWNER/$_repo/releases" \
      | jq -r '.[].tag_name'
  fi
}

binary_assets () {
  local _repo="$1"
  local _version="$2"
  local _platform="$3"

  if [ "$USE_GH" ]; then
    gh api https://api.github.com/repos/spex-lang/spex/releases --jq \
      ".[] | select(.tag_name == \"$_version\") | \
       .assets[] | select(.name | contains(\"$_platform\")) | \
       .browser_download_url"
  else
    downloader "https://api.github.com/repos/$OWNER/$_repo/releases" \
      | jq -r ".[] | select(.tag_name == \"$_version\") | \
               .assets[] | select(.name | contains(\"$_platform\")) | \
               .browser_download_url"
  fi
}

# ------------------------------------------------------------------------
# Utilities

check_terminal_ansi_support () {

  # Assume no ANSI support.
  bold=""
  red=""
  cyan=""
  yellow=""
  reset=""

  if [ -t 2 ]; then
    if [ "${TERM+set}" = 'set' ]; then
      # If tput exists, then rely on it doing ANSI support detection.
      if check_cmd tput; then
        bold=$(tput bold)
        red=$(tput setaf 1)
        cyan=$(tput setaf 6)
        yellow=$(tput setaf 3)
        reset=$(tput sgr0)
      else
        # Otherwise fallback on rustup's method.
        case "$TERM" in
          xterm*|rxvt*|urxvt*|linux*|vt*)
            bold="\033[1m"
            red="\033[31m"
            cyan="\033[36m"
            yellow="\033[33m"
            reset="\033[0m" ;;
        esac
      fi
    fi
  fi
}

downloader() {
    local _url="$1"
    if [ -n "${GH_TOKEN+x}" ]; then
        curl \
            --header "Authorization: Bearer ${GH_TOKEN}" \
            --header "Accept: application/vnd.github+json" \
            --header "X-GitHub-Api-Version: 2022-11-28" \
            --header "User-Agent: spex-lang/spexup" \
            --silent \
            --show-error \
            --fail \
            --location \
            --retry 3 \
            "$_url"
    else
        curl \
            --header "Accept: application/vnd.github+json" \
            --header "X-GitHub-Api-Version: 2022-11-28" \
            --header "User-Agent: spex-lang/spexup" \
            --silent \
            --show-error \
            --fail \
            --location \
            --retry 3 \
            "$_url"
    fi
}

say() {
  printf "%si%s %s\n" "${cyan}" "${reset}" "$1"
}

warn() {
  printf "%sWarning%s: %s\n" "${yellow}" "${reset}" "$1"
}

err() {
  printf "%s%sError%s: %s\n" "${red}" "${bold}" "${reset}" "$1"
}

need_cmd() {
  if ! check_cmd "$1"; then
    err "need '$1' (command not found)"
    exit 1
  fi
}

check_cmd() {
  command -v "$1" > /dev/null 2>&1
}

assert_nz() {
  if [ -z "$1" ]; then 
    err "$2"
    exit 1
  fi
}

# Run a command that should never fail. If the command fails execution
# will immediately terminate with an error showing the failing
# command.
ensure() {
  if ! "$@"; then
    err "command failed: $*"
    exit 1
  fi
}

# This is just for indicating that commands' results are being
# intentionally ignored. Usually, because it's being executed
# as part of error handling.
ignore() {
  "$@"
}

# ----------------------------------------------------------------------

# The rest of the code is related to platform detection and is taken from:
# https://github.com/rust-lang/rustup/blob/3db381b0bec0f8f36351d431aae723654e4261ae/rustup-init.sh

get_architecture() {
    local _ostype _cputype _bitness _arch _clibtype
    _ostype="$(uname -s)"
    _cputype="$(uname -m)"
    _clibtype="gnu"

    if [ "$_ostype" = Linux ]; then
        if [ "$(uname -o)" = Android ]; then
            _ostype=Android
        fi
        if ldd --version 2>&1 | grep -q 'musl'; then
            _clibtype="musl"
        fi
    fi

    if [ "$_ostype" = Darwin ]; then
        # Darwin `uname -m` can lie due to Rosetta shenanigans. If you manage to
        # invoke a native shell binary and then a native uname binary, you can
        # get the real answer, but that's hard to ensure, so instead we use
        # `sysctl` (which doesn't lie) to check for the actual architecture.
        if [ "$_cputype" = i386 ]; then
            # Handling i386 compatibility mode in older macOS versions (<10.15)
            # running on x86_64-based Macs.
            # Starting from 10.15, macOS explicitly bans all i386 binaries from running.
            # See: <https://support.apple.com/en-us/HT208436>

            # Avoid `sysctl: unknown oid` stderr output and/or non-zero exit code.
            if sysctl hw.optional.x86_64 2> /dev/null || true | grep -q ': 1'; then
                _cputype=x86_64
            fi
        elif [ "$_cputype" = x86_64 ]; then
            # Handling x86-64 compatibility mode (a.k.a. Rosetta 2)
            # in newer macOS versions (>=11) running on arm64-based Macs.
            # Rosetta 2 is built exclusively for x86-64 and cannot run i386 binaries.

            # Avoid `sysctl: unknown oid` stderr output and/or non-zero exit code.
            if sysctl hw.optional.arm64 2> /dev/null || true | grep -q ': 1'; then
                _cputype=arm64
            fi
        fi
    fi

    if [ "$_ostype" = SunOS ]; then
        # Both Solaris and illumos presently announce as "SunOS" in "uname -s"
        # so use "uname -o" to disambiguate.  We use the full path to the
        # system uname in case the user has coreutils uname first in PATH,
        # which has historically sometimes printed the wrong value here.
        if [ "$(/usr/bin/uname -o)" = illumos ]; then
            _ostype=illumos
        fi

        # illumos systems have multi-arch userlands, and "uname -m" reports the
        # machine hardware name; e.g., "i86pc" on both 32- and 64-bit x86
        # systems.  Check for the native (widest) instruction set on the
        # running kernel:
        if [ "$_cputype" = i86pc ]; then
            _cputype="$(isainfo -n)"
        fi
    fi

    local _current_exe
    case "$_ostype" in

        Android)
            _ostype=linux-android
            ;;

        Linux)
            _current_exe=$(get_current_exe)
            _ostype=unknown-linux-$_clibtype
            _bitness=$(get_bitness "$_current_exe")
            ;;

        FreeBSD)
            _ostype=unknown-freebsd
            ;;

        NetBSD)
            _ostype=unknown-netbsd
            ;;

        DragonFly)
            _ostype=unknown-dragonfly
            ;;

        Darwin)
            _ostype=apple-darwin
            ;;

        illumos)
            _ostype=unknown-illumos
            ;;

        MINGW* | MSYS* | CYGWIN* | Windows_NT)
            _ostype=pc-windows-gnu
            ;;

        *)
            err "unrecognized OS type: $_ostype"
            exit 1
            ;;

    esac

    case "$_cputype" in

        i386 | i486 | i686 | i786 | x86)
            _cputype=i686
            ;;

        xscale | arm)
            _cputype=arm
            if [ "$_ostype" = "linux-android" ]; then
                _ostype=linux-androideabi
            fi
            ;;

        armv6l)
            _cputype=arm
            if [ "$_ostype" = "linux-android" ]; then
                _ostype=linux-androideabi
            else
                _ostype="${_ostype}eabihf"
            fi
            ;;

        armv7l | armv8l)
            _cputype=armv7
            if [ "$_ostype" = "linux-android" ]; then
                _ostype=linux-androideabi
            else
                _ostype="${_ostype}eabihf"
            fi
            ;;

        aarch64 | arm64)
            _cputype=aarch64
            ;;

        x86_64 | x86-64 | x64 | amd64)
            _cputype=x86_64
            ;;

        mips)
            _cputype=$(get_endianness "$_current_exe" mips '' el)
            ;;

        mips64)
            if [ "$_bitness" -eq 64 ]; then
                # only n64 ABI is supported for now
                _ostype="${_ostype}abi64"
                _cputype=$(get_endianness "$_current_exe" mips64 '' el)
            fi
            ;;

        ppc)
            _cputype=powerpc
            ;;

        ppc64)
            _cputype=powerpc64
            ;;

        ppc64le)
            _cputype=powerpc64le
            ;;

        s390x)
            _cputype=s390x
            ;;
        riscv64)
            _cputype=riscv64gc
            ;;
        loongarch64)
            _cputype=loongarch64
            ensure_loongarch_uapi
            ;;
        *)
            err "unknown CPU type: $_cputype"
            exit 1

    esac

    # Detect 64-bit linux with 32-bit userland
    if [ "${_ostype}" = unknown-linux-gnu ] && [ "${_bitness}" -eq 32 ]; then
        case $_cputype in
            x86_64)
                if [ -n "${RUSTUP_CPUTYPE:-}" ]; then
                    _cputype="$RUSTUP_CPUTYPE"
                else {
                    # 32-bit executable for amd64 = x32
                    if is_host_amd64_elf "$_current_exe"; then {
                        err "This host is running an x32 userland, for which no native toolchain is provided."
                        err "You will have to install multiarch compatibility with i686 or amd64."
                        err "To do so, set the RUSTUP_CPUTYPE environment variable set to i686 or amd64 and re-run this script."
                        err "You will be able to add an x32 target after installation by running \`rustup target add x86_64-unknown-linux-gnux32\`." 
                         exit 1
                    }; else
                        _cputype=i686
                    fi
                }; fi
                ;;
            mips64)
                _cputype=$(get_endianness "$_current_exe" mips '' el)
                ;;
            powerpc64)
                _cputype=powerpc
                ;;
            aarch64)
                _cputype=armv7
                if [ "$_ostype" = "linux-android" ]; then
                    _ostype=linux-androideabi
                else
                    _ostype="${_ostype}eabihf"
                fi
                ;;
            riscv64gc)
                err "riscv64 with 32-bit userland unsupported"
                exit 1
                ;;
        esac
    fi

    # Detect armv7 but without the CPU features Rust needs in that build,
    # and fall back to arm.
    # See https://github.com/rust-lang/rustup.rs/issues/587.
    if [ "$_ostype" = "unknown-linux-gnueabihf" ] && [ "$_cputype" = armv7 ]; then
        if ! (ensure grep '^Features' /proc/cpuinfo | grep -E -q 'neon|simd') ; then
            # Either `/proc/cpuinfo` is malformed or unavailable, or
            # at least one processor does not have NEON (which is asimd on armv8+).
            _cputype=arm
        fi
    fi

    _arch="${_cputype}-${_ostype}"

    RETVAL="$_arch"
}

get_current_exe() {
    # Returns the executable used for system architecture detection
    # This is only run on Linux
    local _current_exe
    if test -L /proc/self/exe ; then
        _current_exe=/proc/self/exe
    else
        warn "Unable to find /proc/self/exe. System architecture detection might be inaccurate."
        if test -n "$SHELL" ; then
            _current_exe=$SHELL
        else
            need_cmd /bin/sh
            _current_exe=/bin/sh
        fi
        warn "Falling back to $_current_exe."
    fi
    echo "$_current_exe"
}

get_bitness() {
    need_cmd head
    # Architecture detection without dependencies beyond coreutils.
    # ELF files start out "\x7fELF", and the following byte is
    #   0x01 for 32-bit and
    #   0x02 for 64-bit.
    # The printf builtin on some shells like dash only supports octal
    # escape sequences, so we use those.
    local _current_exe="$1"
    local _current_exe_head
    _current_exe_head=$(head -c 5 "$_current_exe")
    if [ "$_current_exe_head" = "$(printf '\177ELF\001')" ]; then
        echo 32
    elif [ "$_current_exe_head" = "$(printf '\177ELF\002')" ]; then
        echo 64
    else
        err "unknown platform bitness"
        exit 1;
    fi
}

is_host_amd64_elf() {
    local _current_exe="$1"

    need_cmd head
    need_cmd tail
    # ELF e_machine detection without dependencies beyond coreutils.
    # Two-byte field at offset 0x12 indicates the CPU,
    # but we're interested in it being 0x3E to indicate amd64, or not that.
    local _current_exe_machine
    _current_exe_machine=$(head -c 19 "$_current_exe" | tail -c 1)
    [ "$_current_exe_machine" = "$(printf '\076')" ]
}

get_endianness() {
    local _current_exe="$1"
    local cputype="$2"
    local suffix_eb="$3"
    local suffix_el="$4"

    # detect endianness without od/hexdump, like get_bitness() does.
    need_cmd head
    need_cmd tail

    local _current_exe_endianness
    _current_exe_endianness="$(head -c 6 "$_current_exe" | tail -c 1)"
    if [ "$_current_exe_endianness" = "$(printf '\001')" ]; then
        echo "${cputype}${suffix_el}"
    elif [ "$_current_exe_endianness" = "$(printf '\002')" ]; then
        echo "${cputype}${suffix_eb}"
    else
        err "unknown platform endianness"
        exit 1
    fi
}

# Detect the Linux/LoongArch UAPI flavor, with all errors being non-fatal.
# Returns 0 or 234 in case of successful detection, 1 otherwise (/tmp being
# noexec, or other causes).
check_loongarch_uapi() {
    need_cmd base64

    local _tmp
    if ! _tmp="$(ensure mktemp)"; then
        return 1
    fi

    # Minimal Linux/LoongArch UAPI detection, exiting with 0 in case of
    # upstream ("new world") UAPI, and 234 (-EINVAL truncated) in case of
    # old-world (as deployed on several early commercial Linux distributions
    # for LoongArch).
    #
    # See https://gist.github.com/xen0n/5ee04aaa6cecc5c7794b9a0c3b65fc7f for
    # source to this helper binary.
    ignore base64 -d > "$_tmp" <<EOF
f0VMRgIBAQAAAAAAAAAAAAIAAgEBAAAAeAAgAAAAAABAAAAAAAAAAAAAAAAAAAAAQQAAAEAAOAAB
AAAAAAAAAAEAAAAFAAAAAAAAAAAAAAAAACAAAAAAAAAAIAAAAAAAJAAAAAAAAAAkAAAAAAAAAAAA
AQAAAAAABCiAAwUAFQAGABUAByCAAwsYggMAACsAC3iBAwAAKwAxen0n
EOF

    ignore chmod u+x "$_tmp"
    if [ ! -x "$_tmp" ]; then
        ignore rm "$_tmp"
        return 1
    fi

    "$_tmp"
    local _retval=$?

    ignore rm "$_tmp"
    return "$_retval"
}

ensure_loongarch_uapi() {
    check_loongarch_uapi
    case $? in
        0)
            return 0
            ;;
        234)
            err 'Your Linux kernel does not provide the ABI required by this Rust distribution.'
            err 'Please check with your OS provider for how to obtain a compatible Rust package for your system.'
            exit 1
            ;;
        *)
            warn "Cannot determine current system's ABI flavor, continuing anyway."
            warn 'Note that the official Rust distribution only works with the upstream kernel ABI.'
            warn 'Installation will fail if your running kernel happens to be incompatible.'
            ;;
    esac
}

main "$@" || exit 1
